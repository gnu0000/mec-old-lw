/*
 * listwin.h
 * List Window External Header Module
 */


/*--- LISTWIN CLASS STRING ---*/
extern char szITI_LWClass[];


/*--- MESSAGES TO LISTWIN ---*/
#define LWMSG_START             WM_USER+ 100
#define WM_LWSETEDT             (LWMSG_START + 0)
#define WM_LWSETLABEL           (LWMSG_START + 1)
#define WM_LWSETDRAWPROC        (LWMSG_START + 2)
#define WM_LWSETCOLOR           (LWMSG_START + 3)
#define WM_LWSETTEXTPROC        (LWMSG_START + 4)
#define WM_LWROWCHANGED         (LWMSG_START + 5)
#define WM_LWROWDELETED         (LWMSG_START + 6)
#define WM_LWROWINSERTED        (LWMSG_START + 7)
#define WM_LWQUERYNUMSELECTIONS (LWMSG_START + 8)
#define WM_LWQUERYSELECTION     (LWMSG_START + 9)
#define WM_LWREDRAW             (LWMSG_START + 10)
#define WM_LWMAXSIZE            (LWMSG_START + 11)
#define WM_LWVIEWROW            (LWMSG_START + 12)
#define WM_LWSCROLLCLIENT       (LWMSG_START + 13)
#define WM_LWMAKEACTIVE         (LWMSG_START + 14)
#define WM_LWQUERYROWS          (LWMSG_START + 15)
#define WM_LWQUERYCOLS          (LWMSG_START + 16)

/*--- MESSAGES FROM LISTWIN ---*/
#define WM_LWNQBUTTON           (LWMSG_START + 50)
#define WM_LWNDBLCLK            (LWMSG_START + 51)
#define WM_LWNENTER             (LWMSG_START + 52)
#define WM_LWNSCROLL            (LWMSG_START + 53)




/*              ----- List Window Quick Message Guide: -----
 *
 * MESSAGES SENT TO WINDOW:
 *
 * -------------------------------------------------------------------
 * LIST WINDOW             |      --MP1--        |    --MP2--        |
 *   MESSAGE               | L            H      | L          H      |
 * -------------------------------------------------------------------
 *                         |                     |                   |
 * WM_LWSETEDT             | blabel =F    uCol   |       pedt        |
 *                         | bclient=T           |                   |
 * WM_LWSETLABEL           | uCol         0      |       psz         |
 *                         |                     |                   |
 * WM_LWSETDRAWPROC        |      PFNINITDRAW    |       PFNDRAWTEXT |
 *                         |                     |                   |
 * WM_LWSETCOLOR           | uColorTyp    -      |       lColor      |
 *                         |                     |                   |
 * WM_LWSETTEXTPROC        |      PFNGETTEXT     |   0         0     |
 *                         |                     |                   |
 * WM_LWROWCHANGED         | uFirst       uLast  |   0         0     |
 *                         |                     |                   |
 * WM_LWROWDELETED         | uFirst       uLast  |   0         0     |
 *                         |                     |                   |
 * WM_LWROWINSERTED        | uFirst       uLast  |   0         0     |
 *                         |                     |                   |
 * WM_LWQUERYNUMSELECTIONS | 0            0      |   0         0     |
 *                         |                     |                   |
 * WM_LWQUERYSELECTION     | sel #n=F     uIndex |   0         0     |
 *                         | ?n sel=T     uRow   |                   |
 * WM_LWREDRAW             | all   =F     0      |   0         0     |
 *                         | client=T            |                   |
 * WM_LWMAXSIZE            |                     |   0         0     |
 *                         |                     |                   |
 * WM_LWVIEWROW            | uRow         uCol   |   0         0     |
 *                         |                     |                   |
 * WM_LWSCROLLCLIENT       | uRow         uCol   |   rel=F           |
 *                         |                     |   abs=T           |
 * WM_LWMAKEACTIVE         | uRow         0      |   0         0     |
 *                         |                     |   abs=T           |
 * WM_LWQUERYROWS          | 0            0      |   0         0     |
 *                         |                     |   abs=T           |
 * WM_LWQUERYCOLS          | 0            0      |   0         0     |
 * -------------------------------------------------------------------
 *
 *
 *
 * MESSAGES GENERATED BY LIST WINDOW FOR PARENT:
 *
 * -------------------------------------------------------------------
 * LIST WINDOW             |      --MP1--        |    --MP2--        |
 *   MESSAGE               | L            H      | L          H      |
 * ------------------------+---------------------+--------------------
 * WM_LWNQBUTTON           |       hListWnd      | 0          0      |
 *                         |                     |                   |
 * WM_LWNDBLCLK            | uRow         uCol   | 0          0      |
 *                         |                     |                   |
 * WM_LWNENTER             | uRow         uCol   |                   |
 *                         |                     |                   |
 * WM_LWNSCROLL            | uDeltaX      uDeltaY| uAbsX      uAbsY  |
 *                         |                     |                   |
 * -------------------------------------------------------------------
 *
 *
 *
 *              ----- List Window Quick Functions Guide: -----
 *
 * int LWRegister (HAB hab);
 *
 * int LWTerminate (void);
 *
 * int LWInit (HWND       hwnd,
 *             PLWINIT    plwInit,
 *             EDT        aedtClient[],
 *             EDT        aedtLabel[],
 *             PSZ        pszLabelTxt[],
 *             PFNGETTEXT GetText);
 *
 */



/*
 * --- LISTWIN STYLES ---
 * 
 *  These are the styles a listwin may have
 *  They are bitwise or'ed in the ufOptions parameter
 *  of the LWINIT struct. see LWINIT for description.
 */
#define LWS_HSCROLL     0x0001
#define LWS_VSPLIT      0x0003
#define LWS_VSCROLL     0x0004
#define LWS_HSPLIT      0x000C
#define LWS_QBUTTON     0x0015
#define LWS_LABEL       0x0020
#define LWS_SELECT      0x0040
#define LWS_MULTISELECT 0x00C0
#define LWS_SPLITATTOP  0x0100



/*
 * --- LISTWIN DEFAULT COLORS ---
 */
#define LWCLR_DEFCLIENT       CLR_WHITE
#define LWCLR_DEFLABEL        CLR_DARKGRAY
#define LWCLR_DEFSELECT       CLR_DARKGRAY
#define LWCLR_DEFACTIVE       CLR_BLACK
#define LWCLR_DEFSPLITBORDER  CLR_DARKGRAY
#define LWCLR_DEFSPLITMIN     SYSCLR_BACKGROUND
#define LWCLR_DEFSPLITMAX     SYSCLR_BACKGROUND



/*
 * --- VALID ColorTypes FOR WM_LWSETCOLOR ---
 */ 
#define LWC_RESET         0
#define LWC_CLIENT        1
#define LWC_LABEL         2
#define LWC_SELECT        3
#define LWC_ACTIVE        4
#define LWC_SPLITBORDER   5
#define LWC_SPLITMIN      6
#define LWC_SPLITMAX      7
                       


#define OK              0
#define NOT_OK          1



/*
 * The LWRegister procedure must be called before any list windows
 * are created.
 *
 * The LWTerminate procedure must be called before the process is
 * terminated so any allocated resources may be freed
 */
int LWRegister (HAB hab);
int LWTerminate (void);




/*
 *  --- LWINIT STRUCTURE ---
 *
 * This structure is used by the LWInit proc
 * to initialize the output metrics. This procedure
 * must be called before any information will be
 * displayed by the window:
 *
 *
 * > asterisks after the name indicate optional values.
 * > all metrics are specified in pixels.
 * > the coordinate system is the standard 0S/2 back-assward system
 *
 * uClientRows    The number of rows in the client window
 * uClientCols    The number of cols in the client window
 * uLabelCols   * The number of cols in the label window.
 *                This may be 0, which will default to uClientCols.
 *                This metric is only meaningful if the window
 *                contains the LWS_LABEL style (see below)
 * uYClientSize * The vertical size of a row. This may be 0,
 *                which will cause this value to be calculated by
 *                determining the bounding rectangle of all cols
 *                in a row, using the ymax, and setting ymin to zero
 * uYLabelSize  * The vertical size of the label area. This may be 0
 *                which will cause the label size to be calculated 
 *                in the method similar to uYClientSize
 * uXScrollInc  * The increment to scroll for the horizontal scroll
 *                bar. This may be 0, which defaults to 40. This only
 *                has meaning if the window contains the LWS_HSCROLL
 *                style.
 * ufOptions      This contains the style bits that the window is to
 *                have. It may be any combination of the below styles:
 *    LWS_HSCROLL ... window has a horizontal scrollbar
 *    LWS_VSPLIT  ... window has a vertical scroll bar
 *    LWS_VSCROLL ... window has a vertical split bar
 *    LWS_HSPLIT .... window has a horizontal split bar
 *    LWS_LABEL ..... window has a label area
 *    LWS_SELECT .... client area has single selection   
 *    LWS_MULTISELECT client area has multi selection
 *    LWS_SPLITATTOP  split bars start at top/left
 *
 */
typedef struct
   { USHORT uClientRows;
     USHORT uClientCols;
     USHORT uLabelCols;    /* may be zero */
     USHORT uYClientSize;  /* may be zero */
     USHORT uYLabelSize;   /* may be zero */
     USHORT uXScrollInc;   /* may be zero */
     USHORT ufOptions;
   } LWINIT;
typedef LWINIT FAR *PLWINIT;



/*
 *  --- EDT STRUCTURE ---
 *
 * The LWInit proc uses 2 arrays of these structures for the
 * client area and the label area. This structure initializes
 * output metrics for an individual column.
 *
 * rclPos         This structure containing the bounding rectangle
 *                for the column, the column number is represented
 *                positionally.
 * lFColor        The foreground color for the text in this column.
 * ufFlags        The text frags that WinDrawText uses to draw text
 *                in a bounding rectangle.
 *
 */

/* 1/7/91 -
 * This field should also contain the query number and the field number
 * the query number will be ignored by listwindows. the field number is
 * the actual column of the data or label text
 */
 
typedef struct
   { RECTL  rclPos;
     LONG   lFColor;
     USHORT ufFlags;
   } EDT;
typedef EDT FAR *PEDT;



/*
 *  --- LWINIT PROC ---
 *
 * The LWInit procedure must be called after the window is created
 * The parameters are as follows:
 *
 * hwnd           The handle of the listwindow frame.
 * plwInit        The PLWINIT structure described above.
 * aedtClient[]   Array of EDT structures described above.
 *                This array describes the Client columns.
 * aedtLabel[]  * Array of EDT structures described above.
 *                This array describes the Label columns.
 *                This pointer may be NULL, which will default to
 *                the same as aedtClient[]. This value is only used
 *                if the LWS_LABEL style is used.
 * pszLabelTxt[]  Array of pointers to Label strings, identified
 *                positionally.  This parameter is only used if the
 *                LWS_LABEL parameter is specified.
 * GetText        This parameter identifies the function which is to
 *                specify text for a given row,col in the client area.
 *                the function is to be of the form:
 *                    int GetTextStr  (HWND hChildWnd, USHORT uRow,
 *                                     USHORT uCol, PSZ *ppszText)
 *                This parameter may be NULL, but then the client will
 *                only display a test pattern.
 *                This function is not called if the user is going to 
 *                do the drawing (I.E. the LWInitDrawProc fn is used)
 *
 */
typedef int (*PFNGETTEXT)  (HWND hwnd, USHORT uRow, USHORT uCol, PSZ *ppszText);

int LWInit (HWND       hwnd,
            PLWINIT    plwInit,
            EDT        aedtClient[],
            EDT        aedtLabel[],
            PSZ        pszLabelTxt[],
            PFNGETTEXT GetText);






/*
 * The LWChangeColor proc is used to change the color of one or
 * more parts of a list window. The parameters are:
 *
 * hwnd           The window whose color(s) are to be changed
 * uColorType     The element to change. The choices are:
 *    	
 *    LWC_RESET ...... Resets all color values to thier default
 *    LWC_CLIENT ..... Set Client Background Color
 *    LWC_LABEL ...... Set Label Background Color
 *    LWC_SELECT ..... Set Selected Element Background Color
 *    LWC_ACTIVE ..... Set Active Outline Color
 *    LWC_SPLITBORDER  Set Split Bar Border Color
 *    LWC_SPLITMIN ... Set Split Bar Interior color when minimized
 *    LWC_SPLITMAX ... Set Split Bar Interior color when maximized
 *
 * lColorVal      The new color. This may be any color value including
 *                one of:
 *    LWCLR_DEFCLIENT     
 *    LWCLR_DEFLABEL      
 *    LWCLR_DEFSELECT     
 *    LWCLR_DEFACTIVE     
 *    LWCLR_DEFSPLITBORDER
 *    LWCLR_DEFSPLITMIN   
 *    LWCLR_DEFSPLITMAX   
 *
 * LWRedraw should be called after a call to LWChangeColor.
 *
 */



/*
 *  --- DRAWINFO STRUCTURE ---
 *
 * This structure is only used if the owner is to draw the client
 * manually. If so, this structure is passed to the paint procedure.
 * The parameters are:
 *
 * hps            The handle to the current presentation space
 * uRow           The current row to paint
 * uCol           The current col to paint
 * prclPos        The bounding rectangle of the area to paint
 * lFColor        The foreground color given by the EDT Structure
 * lBColor        The background color given by the currently set color
 * ufFlags        The Text drawing flags given by the EDT Structure
 *
 */
typedef struct 
   { HPS    hps;
     USHORT uRow;
     USHORT uCol;
     PRECTL prclPos;
     LONG   lFColor;
     LONG   lBColor;
     USHORT ufFlags;
   } DRAWINFO;
typedef DRAWINFO FAR *PDRAWINFO;

/*
 *  --- LWINITCLIENTDRAW STRUCTURE ---
 *
 * Calling this procedure signifies that the owner wishes to do
 * the painting of the client window. When this proc is called,
 * the GetText procedure is no longer used and the given paint
 * proc is used instead. If the paint proc is set to NULL, the
 * GetText proc is called and the area is painted automatically.
 * If this proc is used after the LWInit, LWRedraw should be used
 * to redraw the list window. The parameters are as follows:
 *
 * hwnd            The window to change.
 * InitClientDraw  The function to be called once at the
 *                 beginning of each paint. If this is NULL,
 *                 No init procedure is called. The form of this
 *                 function is as follows:
 *                    int InitClientDraw (HWND hwnd, HPS hps)
 *
 *
 * DrawClientText  The function to be called once for each
 *                 row,col. If this is NULL, the GetText proc is
 *                 called and the painting is done internally.
 *                 The form of this function is as follows:
 *                    int DrawRect (HWND hwnd, PDRAWINFO pdi)
 *
 */
typedef int (*PFNINITDRAW) (HWND hwnd, HPS hps);
typedef int (*PFNDRAWTEXT) (HWND hwnd, PDRAWINFO pdi);


/*
 * useful utuility procs
 */
int AssignRcl (RECTL *rcl, LONG xLeft, LONG yBottom, LONG xRight, LONG yTop);




/* MESSAGE .....WM_LWSETEDT            
 * MP1L ........Label/Column  (BOOL)
 * MP1H ........Column        (USHORT)
 * MP2  ........pedtStruct    (PEDT)
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWSETLABEL          
 * MP1L ........Column        (USHORT)
 * MP1H ........0
 * MP2 .........pszText       (PSZ)
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWSETDRAWPROC       
 * MP1 .........InitDrawProc  (PFNINITDRAW)
 * MP2 .........DrawProc      (PFNDRAWTEXT)
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWSETCOLOR          
 * MP1 .........ColorType     (USHORT)
 * MP2 .........lColor        (LONG)
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWSETTEXTPROC       
 * MP1 .........GetTextProc   (PFNGETTEXT)
 * MP2 .........0L
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWROWCHANGED        
 * MP1L ........First         (USHORT)
 * MP1H ........Last          (USHORT)
 * MP2 .........0L
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWROWDELETED        
 * MP1L ........First         (USHORT)
 * MP1H ........Last          (USHORT)
 * MP2 .........0L
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWROWINSERTED       
 * MP1L ........First         (USHORT)
 * MP1H ........Last          (USHORT)
 * MP2 .........0L
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWQUERYNUMSELECTIONS
 * MP1 .........0L
 * MP2 .........0L
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWQUERYSELECTION    
 * MP1L ........sel#/?sel     (BOOL)
 * MP1H ........uIndex/uRow   (USHORT)
 * MP2 .........0L
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWREDRAW            
 * MP1L ........all/client    (BOOL)
 * MP2 .........
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWMAXSIZE           
 * MP1 .........
 * MP2 .........
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWVIEWROW           
 * MP1 .........
 * MP2 .........
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWSCROLLCLIENT      
 * MP1 .........
 * MP2 .........
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWMAKEACTIVE        
 * MP1 .........
 * MP2 .........
 * DESCRIPTION .
 *
 *
 *
 */

/* MESSAGE .....WM_LWQUERYROWS         
 * MP1 .........
 * MP2 .........
 * DESCRIPTION .
 *
 *
 *
 */


/* MESSAGE .....WM_LWQUERYCOLS         
 * MP1 .........
 * MP2 .........
 * DESCRIPTION .
 *
 *
 *
 */
